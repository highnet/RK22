using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using DG.Tweening;
using System;

public class EndOfRacePanel : MonoBehaviour
{
    public TextMeshProUGUI progressSavedText; // the progess saved text
    public float progressSavedTextAlpha; // the progress saved text RBGA color alpha
    public TextMeshProUGUI totalRaceTime; // the total race time text
    public TextMeshProUGUI lap1Time; // the lap 1 time text
    public TextMeshProUGUI lap2Time; // the lap 2 time text
    public TextMeshProUGUI lap3Time; // the lap 3 time text
    public TextMeshProUGUI goldTime; // the gold time text
    public TextMeshProUGUI goldName; // the gold name text 
    public TextMeshProUGUI silverTime; // the silver time text
    public TextMeshProUGUI silverName; // the silver name text 
    public TextMeshProUGUI bronzeTime; // the bronze time text 
    public TextMeshProUGUI bronzeName; // the bronze name text
    public Image characterThumbnail; // the character thumbnail image
    public Image kartThumbnail; // the kart thumbnail image
    public FinishLine finishLine; // the finish line 
    public PrefabGarage prefabGarage; // the prefab garage
    public RaceController raceController; // the race controller
    public Color goldColor; // the gold color
    public Color silverColor; // the silver color
    public Color bronzeColor; // the bronze color


    // Start is called before the first frame update
    private void Start()
    {
        finishLine = GameObject.FindGameObjectWithTag("Finish").GetComponent<FinishLine>(); // get a local reference to the finish line
        prefabGarage = FindObjectOfType<PrefabGarage>(); // get a local reference to the prefab garage
        raceController = FindObjectOfType<RaceController>(); // get a local reference to the race controller
    }

    // Update is called once per frame
    void Update()
    {
        progressSavedText.color = new Color(1f, 1f, 1f, progressSavedTextAlpha); // update the progress saved text alpha
    }

    public void PrepareEndOfRaceScreen()
    {
        RecordEntry myRecordEntry = finishLine.recordEntry; // get record entry generated by the finish line
        DOTween.To(() => progressSavedTextAlpha, (newValue) => progressSavedTextAlpha = newValue, 0f, 600f).SetEase(Ease.InOutFlash, 300f, 0f).SetLoops(-1, LoopType.Restart); // tween the progress saved text alpha oscillation
        totalRaceTime.text = TimeSpan.FromSeconds(myRecordEntry.time).ToString(@"hh\:mm\:ss"); // update the total race time text with the converted record entry time converted to the appropiate string format
        characterThumbnail.sprite = prefabGarage.characterThumbnailSprites[(int) myRecordEntry.character]; // update the character thumbnail sprite with the appropiate character thumbnail sprite
        kartThumbnail.sprite = prefabGarage.kartBodyThumbnailSprites[(int)myRecordEntry.kart]; // update the kart thumbnail sprite with the appropaite kart thumbnail sprite
        List<RecordEntry> recordEntries = finishLine.recordEntries; // get the finish line list of record entries
        if (raceController.lapTimes.Count >= 1) // if there are more than 1 laps on record
        {
            lap1Time.text = TimeSpan.FromSeconds(raceController.lapTimes[0]).ToString(@"hh\:mm\:ss"); // update the lap 1 time text with the appropiately formatted tring
        }
        if (raceController.lapTimes.Count >= 2) // if there are more than 2 laps on record
        {
            lap2Time.text = TimeSpan.FromSeconds(raceController.lapTimes[1]).ToString(@"hh\:mm\:ss"); // update the lap 2 time text with the appropiately formatted string
        }
        if (raceController.lapTimes.Count >= 3) // if there are more than 3 laps on record
        {
            lap3Time.text = TimeSpan.FromSeconds(raceController.lapTimes[2]).ToString(@"hh\:mm\:ss"); // update the lap 3 time text with the appropiately formatted string
        }
        goldTime.text = TimeSpan.FromSeconds(recordEntries[0].time).ToString(@"hh\:mm\:ss"); // update the gold time text with the appropiately formatted string
        goldName.text = recordEntries[0].author; // set the gold name text with the author's name
        silverTime.text = TimeSpan.FromSeconds(recordEntries[1].time).ToString(@"hh\:mm\:ss"); // update the silver time text with the appropiately formatted string
        silverName.text = recordEntries[1].author; // set the silver name text with the author's name
        bronzeTime.text = TimeSpan.FromSeconds(recordEntries[2].time).ToString(@"hh\:mm\:ss"); // update the bronze time text with the appropiately formatted string
        bronzeName.text = recordEntries[2].author; // set the bronze name text with the author's name
    }
}
